start[ast.Module]: a=stmt* ENDMARKER { ast.Module(body=a or []) }

stmt:
      | a=expr NEWLINE          { ast.Expr(value=a, LOCATIONS) }
      | a=expr ENDMARKER        { ast.Expr(value=a, LOCATIONS) }

expr:
      | l=expr '+' r=term       { ast.BinOp(left=l, op=ast.Add(), right=r, LOCATIONS) }
      | l=expr '-' r=term       { ast.BinOp(left=l, op=ast.Sub(), right=r, LOCATIONS) }
      | term

term:
      | l=term '*' r=factor     { ast.BinOp(left=l, op=ast.Mult(), right=r, LOCATIONS) }
      | l=term '/' r=factor     { ast.BinOp(left=l, op=ast.Div(), right=r, LOCATIONS) }
      | factor

factor:
      | '(' e=expr ')'          { e }
      | atom                    { atom }

atom:
      | a=NAME                  { a }
      | a=NUMBER                { a }

